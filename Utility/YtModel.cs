// <auto-generated />
//
// To parse this JSON data, add NuGet 'System.Text.Json' then do:
//
//    using QuickType;
//
//    var videos = Videos.FromJson(jsonString);
#nullable enable
#pragma warning disable CS8618
#pragma warning disable CS8601
#pragma warning disable CS8603

namespace QuickType
{
	using System;
	using System.Collections.Generic;

	using System.Text.Json;
	using System.Text.Json.Serialization;
	using System.Globalization;

	public partial class Videos
	{
		[JsonPropertyName("contents")]
		public Contents Contents { get; set; }
	}

	public partial class Contents
	{
		[JsonPropertyName("twoColumnBrowseResultsRenderer")]
		public TwoColumnBrowseResultsRenderer TwoColumnBrowseResultsRenderer { get; set; }
	}

	public partial class TwoColumnBrowseResultsRenderer
	{
		[JsonPropertyName("tabs")]
		public List<Tab> Tabs { get; set; }
	}

	public partial class Tab
	{
		[JsonPropertyName("tabRenderer")]
		public TabRenderer TabRenderer { get; set; }
	}

	public partial class TabRenderer
	{
		[JsonPropertyName("selected")]
		public bool Selected { get; set; }

		[JsonPropertyName("content")]
		public TabRendererContent Content { get; set; }

		[JsonPropertyName("trackingParams")]
		public string TrackingParams { get; set; }
	}

	public partial class TabRendererContent
	{
		[JsonPropertyName("sectionListRenderer")]
		public SectionListRenderer SectionListRenderer { get; set; }
	}

	public partial class SectionListRenderer
	{
		[JsonPropertyName("contents")]
		public List<SectionListRendererContent> Contents { get; set; }

		[JsonPropertyName("trackingParams")]
		public string TrackingParams { get; set; }

		[JsonPropertyName("targetId")]
		public string TargetId { get; set; }
	}

	public partial class SectionListRendererContent
	{
		[JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
		[JsonPropertyName("itemSectionRenderer")]
		public ItemSectionRenderer ItemSectionRenderer { get; set; }

		[JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
		[JsonPropertyName("continuationItemRenderer")]
		public ContinuationItemRenderer ContinuationItemRenderer { get; set; }
	}

	public partial class ContinuationItemRenderer
	{
		[JsonPropertyName("trigger")]
		public string Trigger { get; set; }

		[JsonPropertyName("continuationEndpoint")]
		public ContinuationEndpoint ContinuationEndpoint { get; set; }
	}

	public partial class ContinuationEndpoint
	{
		[JsonPropertyName("clickTrackingParams")]
		public string ClickTrackingParams { get; set; }

		[JsonPropertyName("commandMetadata")]
		public ContinuationEndpointCommandMetadata CommandMetadata { get; set; }

		[JsonPropertyName("continuationCommand")]
		public ContinuationCommand ContinuationCommand { get; set; }
	}

	public partial class ContinuationEndpointCommandMetadata
	{
		[JsonPropertyName("webCommandMetadata")]
		public PurpleWebCommandMetadata WebCommandMetadata { get; set; }
	}

	public partial class PurpleWebCommandMetadata
	{
		[JsonPropertyName("sendPost")]
		public bool SendPost { get; set; }

		[JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
		[JsonPropertyName("apiUrl")]
		public ApiUrl? ApiUrl { get; set; }
	}

	public partial class ContinuationCommand
	{
		[JsonPropertyName("token")]
		public string Token { get; set; }

		[JsonPropertyName("request")]
		public string Request { get; set; }
	}

	public partial class ItemSectionRenderer
	{
		[JsonPropertyName("contents")]
		public List<ItemSectionRendererContent> Contents { get; set; }

		[JsonPropertyName("trackingParams")]
		public string TrackingParams { get; set; }
	}

	public partial class ItemSectionRendererContent
	{
		[JsonPropertyName("playlistVideoListRenderer")]
		public PlaylistVideoListRenderer PlaylistVideoListRenderer { get; set; }
	}

	public partial class PlaylistVideoListRenderer
	{
		[JsonPropertyName("contents")]
		public List<PlaylistVideoListRendererContent> Contents { get; set; }

		[JsonPropertyName("playlistId")]
		public TId PlaylistId { get; set; }

		[JsonPropertyName("isEditable")]
		public bool IsEditable { get; set; }

		[JsonPropertyName("canReorder")]
		public bool CanReorder { get; set; }

		[JsonPropertyName("trackingParams")]
		public string TrackingParams { get; set; }

		[JsonPropertyName("targetId")]
		public TId TargetId { get; set; }
	}

	public partial class PlaylistVideoListRendererContent
	{
		[JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
		[JsonPropertyName("playlistVideoRenderer")]
		public PlaylistVideoRenderer PlaylistVideoRenderer { get; set; }

		[JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
		[JsonPropertyName("continuationItemRenderer")]
		public ContinuationItemRenderer ContinuationItemRenderer { get; set; }
	}

	public partial class PlaylistVideoRenderer
	{
		[JsonPropertyName("videoId")]
		public string VideoId { get; set; }

		[JsonPropertyName("thumbnail")]
		public PlaylistVideoRendererThumbnail Thumbnail { get; set; }

		[JsonPropertyName("title")]
		public Title Title { get; set; }

		[JsonPropertyName("index")]
		public Index Index { get; set; }

		[JsonPropertyName("shortBylineText")]
		public ShortBylineText ShortBylineText { get; set; }

		[JsonPropertyName("lengthText")]
		public Text LengthText { get; set; }

		[JsonPropertyName("navigationEndpoint")]
		public PlaylistVideoRendererNavigationEndpoint NavigationEndpoint { get; set; }

		[JsonPropertyName("lengthSeconds")]
		[JsonConverter(typeof(ParseStringConverter))]
		public long LengthSeconds { get; set; }

		[JsonPropertyName("trackingParams")]
		public string TrackingParams { get; set; }

		[JsonPropertyName("isPlayable")]
		public bool IsPlayable { get; set; }

		[JsonPropertyName("menu")]
		public Menu Menu { get; set; }

		[JsonPropertyName("thumbnailOverlays")]
		public List<ThumbnailOverlay> ThumbnailOverlays { get; set; }

		[JsonPropertyName("videoInfo")]
		public VideoInfo VideoInfo { get; set; }
	}

	public partial class Index
	{
		[JsonPropertyName("simpleText")]
		[JsonConverter(typeof(ParseStringConverter))]
		public long SimpleText { get; set; }
	}

	public partial class Text
	{
		[JsonPropertyName("accessibility")]
		public Accessibility Accessibility { get; set; }

		[JsonPropertyName("simpleText")]
		public string SimpleText { get; set; }
	}

	public partial class Accessibility
	{
		[JsonPropertyName("accessibilityData")]
		public AccessibilityData AccessibilityData { get; set; }
	}

	public partial class AccessibilityData
	{
		[JsonPropertyName("label")]
		public string Label { get; set; }
	}

	public partial class Menu
	{
		[JsonPropertyName("menuRenderer")]
		public MenuRenderer MenuRenderer { get; set; }
	}

	public partial class MenuRenderer
	{
		[JsonPropertyName("items")]
		public List<Item> Items { get; set; }

		[JsonPropertyName("trackingParams")]
		public string TrackingParams { get; set; }

		[JsonPropertyName("accessibility")]
		public Accessibility Accessibility { get; set; }
	}

	public partial class Item
	{
		[JsonPropertyName("menuServiceItemRenderer")]
		public MenuServiceItemRenderer MenuServiceItemRenderer { get; set; }
	}

	public partial class MenuServiceItemRenderer
	{
		[JsonPropertyName("text")]
		public VideoInfo Text { get; set; }

		[JsonPropertyName("icon")]
		public Icon Icon { get; set; }

		[JsonPropertyName("serviceEndpoint")]
		public ServiceEndpoint ServiceEndpoint { get; set; }

		[JsonPropertyName("trackingParams")]
		public string TrackingParams { get; set; }

		[JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
		[JsonPropertyName("hasSeparator")]
		public bool? HasSeparator { get; set; }
	}

	public partial class Icon
	{
		[JsonPropertyName("iconType")]
		public IconType IconType { get; set; }
	}

	public partial class ServiceEndpoint
	{
		[JsonPropertyName("clickTrackingParams")]
		public string ClickTrackingParams { get; set; }

		[JsonPropertyName("commandMetadata")]
		public ContinuationEndpointCommandMetadata CommandMetadata { get; set; }

		[JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
		[JsonPropertyName("signalServiceEndpoint")]
		public SignalServiceEndpoint SignalServiceEndpoint { get; set; }

		[JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
		[JsonPropertyName("shareEntityServiceEndpoint")]
		public ShareEntityServiceEndpoint ShareEntityServiceEndpoint { get; set; }
	}

	public partial class ShareEntityServiceEndpoint
	{
		[JsonPropertyName("serializedShareEntity")]
		public string SerializedShareEntity { get; set; }

		[JsonPropertyName("commands")]
		public List<Command> Commands { get; set; }
	}

	public partial class Command
	{
		[JsonPropertyName("clickTrackingParams")]
		public string ClickTrackingParams { get; set; }

		[JsonPropertyName("openPopupAction")]
		public OpenPopupAction OpenPopupAction { get; set; }
	}

	public partial class OpenPopupAction
	{
		[JsonPropertyName("popup")]
		public Popup Popup { get; set; }

		[JsonPropertyName("popupType")]
		public PopupType PopupType { get; set; }

		[JsonPropertyName("beReused")]
		public bool BeReused { get; set; }
	}

	public partial class Popup
	{
		[JsonPropertyName("unifiedSharePanelRenderer")]
		public UnifiedSharePanelRenderer UnifiedSharePanelRenderer { get; set; }
	}

	public partial class UnifiedSharePanelRenderer
	{
		[JsonPropertyName("trackingParams")]
		public string TrackingParams { get; set; }

		[JsonPropertyName("showLoadingSpinner")]
		public bool ShowLoadingSpinner { get; set; }
	}

	public partial class SignalServiceEndpoint
	{
		[JsonPropertyName("signal")]
		public Signal Signal { get; set; }

		[JsonPropertyName("actions")]
		public List<Action> Actions { get; set; }
	}

	public partial class Action
	{
		[JsonPropertyName("clickTrackingParams")]
		public string ClickTrackingParams { get; set; }

		[JsonPropertyName("addToPlaylistCommand")]
		public AddToPlaylistCommand AddToPlaylistCommand { get; set; }
	}

	public partial class AddToPlaylistCommand
	{
		[JsonPropertyName("openMiniplayer")]
		public bool OpenMiniplayer { get; set; }

		[JsonPropertyName("videoId")]
		public string VideoId { get; set; }

		[JsonPropertyName("listType")]
		public ListType ListType { get; set; }

		[JsonPropertyName("onCreateListCommand")]
		public OnCreateListCommand OnCreateListCommand { get; set; }

		[JsonPropertyName("videoIds")]
		public List<string> VideoIds { get; set; }
	}

	public partial class OnCreateListCommand
	{
		[JsonPropertyName("clickTrackingParams")]
		public string ClickTrackingParams { get; set; }

		[JsonPropertyName("commandMetadata")]
		public ContinuationEndpointCommandMetadata CommandMetadata { get; set; }

		[JsonPropertyName("createPlaylistServiceEndpoint")]
		public CreatePlaylistServiceEndpoint CreatePlaylistServiceEndpoint { get; set; }
	}

	public partial class CreatePlaylistServiceEndpoint
	{
		[JsonPropertyName("videoIds")]
		public List<string> VideoIds { get; set; }

		[JsonPropertyName("params")]
		public CreatePlaylistServiceEndpointParams Params { get; set; }
	}

	public partial class VideoInfo
	{
		[JsonPropertyName("runs")]
		public List<VideoInfoRun> Runs { get; set; }
	}

	public partial class VideoInfoRun
	{
		[JsonPropertyName("text")]
		public string Text { get; set; }
	}

	public partial class PlaylistVideoRendererNavigationEndpoint
	{
		[JsonPropertyName("clickTrackingParams")]
		public string ClickTrackingParams { get; set; }

		[JsonPropertyName("commandMetadata")]
		public NavigationEndpointCommandMetadata CommandMetadata { get; set; }

		[JsonPropertyName("watchEndpoint")]
		public WatchEndpoint WatchEndpoint { get; set; }
	}

	public partial class NavigationEndpointCommandMetadata
	{
		[JsonPropertyName("webCommandMetadata")]
		public FluffyWebCommandMetadata WebCommandMetadata { get; set; }
	}

	public partial class FluffyWebCommandMetadata
	{
		[JsonPropertyName("url")]
		public string Url { get; set; }

		[JsonPropertyName("webPageType")]
		public WebPageType WebPageType { get; set; }

		[JsonPropertyName("rootVe")]
		public long RootVe { get; set; }

		[JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
		[JsonPropertyName("apiUrl")]
		public ApiUrl? ApiUrl { get; set; }
	}

	public partial class WatchEndpoint
	{
		[JsonPropertyName("videoId")]
		public string VideoId { get; set; }

		[JsonPropertyName("playlistId")]
		public TId PlaylistId { get; set; }

		[JsonPropertyName("index")]
		public long Index { get; set; }

		[JsonPropertyName("params")]
		public WatchEndpointParams Params { get; set; }

		[JsonPropertyName("playerParams")]
		public PlayerParams PlayerParams { get; set; }

		[JsonPropertyName("loggingContext")]
		public LoggingContext LoggingContext { get; set; }

		[JsonPropertyName("watchEndpointSupportedOnesieConfig")]
		public WatchEndpointSupportedOnesieConfig WatchEndpointSupportedOnesieConfig { get; set; }
	}

	public partial class LoggingContext
	{
		[JsonPropertyName("vssLoggingContext")]
		public VssLoggingContext VssLoggingContext { get; set; }
	}

	public partial class VssLoggingContext
	{
		[JsonPropertyName("serializedContextData")]
		public SerializedContextData SerializedContextData { get; set; }
	}

	public partial class WatchEndpointSupportedOnesieConfig
	{
		[JsonPropertyName("html5PlaybackOnesieConfig")]
		public Html5PlaybackOnesieConfig Html5PlaybackOnesieConfig { get; set; }
	}

	public partial class Html5PlaybackOnesieConfig
	{
		[JsonPropertyName("commonConfig")]
		public CommonConfig CommonConfig { get; set; }
	}

	public partial class CommonConfig
	{
		[JsonPropertyName("url")]
		public Uri Url { get; set; }
	}

	public partial class ShortBylineText
	{
		[JsonPropertyName("runs")]
		public List<ShortBylineTextRun> Runs { get; set; }
	}

	public partial class ShortBylineTextRun
	{
		[JsonPropertyName("text")]
		public string Text { get; set; }

		[JsonPropertyName("navigationEndpoint")]
		public RunNavigationEndpoint NavigationEndpoint { get; set; }
	}

	public partial class RunNavigationEndpoint
	{
		[JsonPropertyName("clickTrackingParams")]
		public string ClickTrackingParams { get; set; }

		[JsonPropertyName("commandMetadata")]
		public NavigationEndpointCommandMetadata CommandMetadata { get; set; }

		[JsonPropertyName("browseEndpoint")]
		public BrowseEndpoint BrowseEndpoint { get; set; }
	}

	public partial class BrowseEndpoint
	{
		[JsonPropertyName("browseId")]
		public string BrowseId { get; set; }

		[JsonPropertyName("canonicalBaseUrl")]
		public string CanonicalBaseUrl { get; set; }
	}

	public partial class PlaylistVideoRendererThumbnail
	{
		[JsonPropertyName("thumbnails")]
		public List<ThumbnailElement> Thumbnails { get; set; }
	}

	public partial class ThumbnailElement
	{
		[JsonPropertyName("url")]
		public Uri Url { get; set; }

		[JsonPropertyName("width")]
		public long Width { get; set; }

		[JsonPropertyName("height")]
		public long Height { get; set; }
	}

	public partial class ThumbnailOverlay
	{
		[JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
		[JsonPropertyName("thumbnailOverlayTimeStatusRenderer")]
		public ThumbnailOverlayTimeStatusRenderer ThumbnailOverlayTimeStatusRenderer { get; set; }

		[JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
		[JsonPropertyName("thumbnailOverlayNowPlayingRenderer")]
		public ThumbnailOverlayNowPlayingRenderer ThumbnailOverlayNowPlayingRenderer { get; set; }
	}

	public partial class ThumbnailOverlayNowPlayingRenderer
	{
		[JsonPropertyName("text")]
		public VideoInfo Text { get; set; }
	}

	public partial class ThumbnailOverlayTimeStatusRenderer
	{
		[JsonPropertyName("text")]
		public Text Text { get; set; }

		[JsonPropertyName("style")]
		public Style Style { get; set; }
	}

	public partial class Title
	{
		[JsonPropertyName("runs")]
		public List<VideoInfoRun> Runs { get; set; }

		[JsonPropertyName("accessibility")]
		public Accessibility Accessibility { get; set; }
	}

	public enum ApiUrl { YoutubeiV1Browse, YoutubeiV1PlaylistCreate, YoutubeiV1ShareGetSharePanel };

	public enum IconType { AddToQueueTail, Share };

	public enum PopupType { Dialog };

	public enum ListType { PlaylistEditListTypeQueue };

	public enum CreatePlaylistServiceEndpointParams { Caq3D };

	public enum Signal { ClientSignal };

	public enum WebPageType { WebPageTypeChannel, WebPageTypeWatch };

	public enum SerializedContextData { GiJqtdzLeUxpdmxjZha1EUdQQktDs3ZuNhn1QWd1RDdoZu1U };

	public enum WatchEndpointParams { Oai3D };

	public enum PlayerParams { IAqb8Aub };

	public enum TId { Pl6KyLivlcdp5YGpbkcKvn4SuAguD7HeMt };

	public enum Style { Default };

	public partial class Videos
	{
		public static Videos FromJson(string json) => JsonSerializer.Deserialize<Videos>(json, QuickType.Converter.Settings);
	}

	public static class Serialize
	{
		public static string ToJson(this Videos self) => JsonSerializer.Serialize(self, QuickType.Converter.Settings);
	}

	internal static class Converter
	{
		public static readonly JsonSerializerOptions Settings = new(JsonSerializerDefaults.General)
		{
			Converters =
			{
				ApiUrlConverter.Singleton,
				IconTypeConverter.Singleton,
				PopupTypeConverter.Singleton,
				ListTypeConverter.Singleton,
				CreatePlaylistServiceEndpointParamsConverter.Singleton,
				SignalConverter.Singleton,
				WebPageTypeConverter.Singleton,
				SerializedContextDataConverter.Singleton,
				WatchEndpointParamsConverter.Singleton,
				PlayerParamsConverter.Singleton,
				TIdConverter.Singleton,
				StyleConverter.Singleton,
				new DateOnlyConverter(),
				new TimeOnlyConverter(),
				IsoDateTimeOffsetConverter.Singleton
			},
		};
	}

	internal class ApiUrlConverter : JsonConverter<ApiUrl>
	{
		public override bool CanConvert(Type t) => t == typeof(ApiUrl);

		public override ApiUrl Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
		{
			var value = reader.GetString();
			switch (value)
			{
				case "/youtubei/v1/browse":
					return ApiUrl.YoutubeiV1Browse;
				case "/youtubei/v1/playlist/create":
					return ApiUrl.YoutubeiV1PlaylistCreate;
				case "/youtubei/v1/share/get_share_panel":
					return ApiUrl.YoutubeiV1ShareGetSharePanel;
			}
			throw new Exception("Cannot unmarshal type ApiUrl");
		}

		public override void Write(Utf8JsonWriter writer, ApiUrl value, JsonSerializerOptions options)
		{
			switch (value)
			{
				case ApiUrl.YoutubeiV1Browse:
					JsonSerializer.Serialize(writer, "/youtubei/v1/browse", options);
					return;
				case ApiUrl.YoutubeiV1PlaylistCreate:
					JsonSerializer.Serialize(writer, "/youtubei/v1/playlist/create", options);
					return;
				case ApiUrl.YoutubeiV1ShareGetSharePanel:
					JsonSerializer.Serialize(writer, "/youtubei/v1/share/get_share_panel", options);
					return;
			}
			throw new Exception("Cannot marshal type ApiUrl");
		}

		public static readonly ApiUrlConverter Singleton = new ApiUrlConverter();
	}

	internal class ParseStringConverter : JsonConverter<long>
	{
		public override bool CanConvert(Type t) => t == typeof(long);

		public override long Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
		{
			var value = reader.GetString();
			long l;
			if (Int64.TryParse(value, out l))
			{
				return l;
			}
			throw new Exception("Cannot unmarshal type long");
		}

		public override void Write(Utf8JsonWriter writer, long value, JsonSerializerOptions options)
		{
			JsonSerializer.Serialize(writer, value.ToString(), options);
			return;
		}

		public static readonly ParseStringConverter Singleton = new ParseStringConverter();
	}

	internal class IconTypeConverter : JsonConverter<IconType>
	{
		public override bool CanConvert(Type t) => t == typeof(IconType);

		public override IconType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
		{
			var value = reader.GetString();
			switch (value)
			{
				case "ADD_TO_QUEUE_TAIL":
					return IconType.AddToQueueTail;
				case "SHARE":
					return IconType.Share;
			}
			throw new Exception("Cannot unmarshal type IconType");
		}

		public override void Write(Utf8JsonWriter writer, IconType value, JsonSerializerOptions options)
		{
			switch (value)
			{
				case IconType.AddToQueueTail:
					JsonSerializer.Serialize(writer, "ADD_TO_QUEUE_TAIL", options);
					return;
				case IconType.Share:
					JsonSerializer.Serialize(writer, "SHARE", options);
					return;
			}
			throw new Exception("Cannot marshal type IconType");
		}

		public static readonly IconTypeConverter Singleton = new IconTypeConverter();
	}

	internal class PopupTypeConverter : JsonConverter<PopupType>
	{
		public override bool CanConvert(Type t) => t == typeof(PopupType);

		public override PopupType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
		{
			var value = reader.GetString();
			if (value == "DIALOG")
			{
				return PopupType.Dialog;
			}
			throw new Exception("Cannot unmarshal type PopupType");
		}

		public override void Write(Utf8JsonWriter writer, PopupType value, JsonSerializerOptions options)
		{
			if (value == PopupType.Dialog)
			{
				JsonSerializer.Serialize(writer, "DIALOG", options);
				return;
			}
			throw new Exception("Cannot marshal type PopupType");
		}

		public static readonly PopupTypeConverter Singleton = new PopupTypeConverter();
	}

	internal class ListTypeConverter : JsonConverter<ListType>
	{
		public override bool CanConvert(Type t) => t == typeof(ListType);

		public override ListType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
		{
			var value = reader.GetString();
			if (value == "PLAYLIST_EDIT_LIST_TYPE_QUEUE")
			{
				return ListType.PlaylistEditListTypeQueue;
			}
			throw new Exception("Cannot unmarshal type ListType");
		}

		public override void Write(Utf8JsonWriter writer, ListType value, JsonSerializerOptions options)
		{
			if (value == ListType.PlaylistEditListTypeQueue)
			{
				JsonSerializer.Serialize(writer, "PLAYLIST_EDIT_LIST_TYPE_QUEUE", options);
				return;
			}
			throw new Exception("Cannot marshal type ListType");
		}

		public static readonly ListTypeConverter Singleton = new ListTypeConverter();
	}

	internal class CreatePlaylistServiceEndpointParamsConverter : JsonConverter<CreatePlaylistServiceEndpointParams>
	{
		public override bool CanConvert(Type t) => t == typeof(CreatePlaylistServiceEndpointParams);

		public override CreatePlaylistServiceEndpointParams Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
		{
			var value = reader.GetString();
			if (value == "CAQ%3D")
			{
				return CreatePlaylistServiceEndpointParams.Caq3D;
			}
			throw new Exception("Cannot unmarshal type CreatePlaylistServiceEndpointParams");
		}

		public override void Write(Utf8JsonWriter writer, CreatePlaylistServiceEndpointParams value, JsonSerializerOptions options)
		{
			if (value == CreatePlaylistServiceEndpointParams.Caq3D)
			{
				JsonSerializer.Serialize(writer, "CAQ%3D", options);
				return;
			}
			throw new Exception("Cannot marshal type CreatePlaylistServiceEndpointParams");
		}

		public static readonly CreatePlaylistServiceEndpointParamsConverter Singleton = new CreatePlaylistServiceEndpointParamsConverter();
	}

	internal class SignalConverter : JsonConverter<Signal>
	{
		public override bool CanConvert(Type t) => t == typeof(Signal);

		public override Signal Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
		{
			var value = reader.GetString();
			if (value == "CLIENT_SIGNAL")
			{
				return Signal.ClientSignal;
			}
			throw new Exception("Cannot unmarshal type Signal");
		}

		public override void Write(Utf8JsonWriter writer, Signal value, JsonSerializerOptions options)
		{
			if (value == Signal.ClientSignal)
			{
				JsonSerializer.Serialize(writer, "CLIENT_SIGNAL", options);
				return;
			}
			throw new Exception("Cannot marshal type Signal");
		}

		public static readonly SignalConverter Singleton = new SignalConverter();
	}

	internal class WebPageTypeConverter : JsonConverter<WebPageType>
	{
		public override bool CanConvert(Type t) => t == typeof(WebPageType);

		public override WebPageType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
		{
			var value = reader.GetString();
			switch (value)
			{
				case "WEB_PAGE_TYPE_CHANNEL":
					return WebPageType.WebPageTypeChannel;
				case "WEB_PAGE_TYPE_WATCH":
					return WebPageType.WebPageTypeWatch;
			}
			throw new Exception("Cannot unmarshal type WebPageType");
		}

		public override void Write(Utf8JsonWriter writer, WebPageType value, JsonSerializerOptions options)
		{
			switch (value)
			{
				case WebPageType.WebPageTypeChannel:
					JsonSerializer.Serialize(writer, "WEB_PAGE_TYPE_CHANNEL", options);
					return;
				case WebPageType.WebPageTypeWatch:
					JsonSerializer.Serialize(writer, "WEB_PAGE_TYPE_WATCH", options);
					return;
			}
			throw new Exception("Cannot marshal type WebPageType");
		}

		public static readonly WebPageTypeConverter Singleton = new WebPageTypeConverter();
	}

	internal class SerializedContextDataConverter : JsonConverter<SerializedContextData>
	{
		public override bool CanConvert(Type t) => t == typeof(SerializedContextData);

		public override SerializedContextData Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
		{
			var value = reader.GetString();
			if (value == "GiJQTDZLeUxpdmxjZHA1eUdQQktDS3ZuNHN1QWd1RDdoZU1U")
			{
				return SerializedContextData.GiJqtdzLeUxpdmxjZha1EUdQQktDs3ZuNhn1QWd1RDdoZu1U;
			}
			throw new Exception("Cannot unmarshal type SerializedContextData");
		}

		public override void Write(Utf8JsonWriter writer, SerializedContextData value, JsonSerializerOptions options)
		{
			if (value == SerializedContextData.GiJqtdzLeUxpdmxjZha1EUdQQktDs3ZuNhn1QWd1RDdoZu1U)
			{
				JsonSerializer.Serialize(writer, "GiJQTDZLeUxpdmxjZHA1eUdQQktDS3ZuNHN1QWd1RDdoZU1U", options);
				return;
			}
			throw new Exception("Cannot marshal type SerializedContextData");
		}

		public static readonly SerializedContextDataConverter Singleton = new SerializedContextDataConverter();
	}

	internal class WatchEndpointParamsConverter : JsonConverter<WatchEndpointParams>
	{
		public override bool CanConvert(Type t) => t == typeof(WatchEndpointParams);

		public override WatchEndpointParams Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
		{
			var value = reader.GetString();
			if (value == "OAI%3D")
			{
				return WatchEndpointParams.Oai3D;
			}
			throw new Exception("Cannot unmarshal type WatchEndpointParams");
		}

		public override void Write(Utf8JsonWriter writer, WatchEndpointParams value, JsonSerializerOptions options)
		{
			if (value == WatchEndpointParams.Oai3D)
			{
				JsonSerializer.Serialize(writer, "OAI%3D", options);
				return;
			}
			throw new Exception("Cannot marshal type WatchEndpointParams");
		}

		public static readonly WatchEndpointParamsConverter Singleton = new WatchEndpointParamsConverter();
	}

	internal class PlayerParamsConverter : JsonConverter<PlayerParams>
	{
		public override bool CanConvert(Type t) => t == typeof(PlayerParams);

		public override PlayerParams Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
		{
			var value = reader.GetString();
			if (value == "iAQB8AUB")
			{
				return PlayerParams.IAqb8Aub;
			}
			throw new Exception("Cannot unmarshal type PlayerParams");
		}

		public override void Write(Utf8JsonWriter writer, PlayerParams value, JsonSerializerOptions options)
		{
			if (value == PlayerParams.IAqb8Aub)
			{
				JsonSerializer.Serialize(writer, "iAQB8AUB", options);
				return;
			}
			throw new Exception("Cannot marshal type PlayerParams");
		}

		public static readonly PlayerParamsConverter Singleton = new PlayerParamsConverter();
	}

	internal class TIdConverter : JsonConverter<TId>
	{
		public override bool CanConvert(Type t) => t == typeof(TId);

		public override TId Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
		{
			var value = reader.GetString();
			if (value == "PL6KyLivlcdp5yGPBKCKvn4suAguD7heMT")
			{
				return TId.Pl6KyLivlcdp5YGpbkcKvn4SuAguD7HeMt;
			}
			throw new Exception("Cannot unmarshal type TId");
		}

		public override void Write(Utf8JsonWriter writer, TId value, JsonSerializerOptions options)
		{
			if (value == TId.Pl6KyLivlcdp5YGpbkcKvn4SuAguD7HeMt)
			{
				JsonSerializer.Serialize(writer, "PL6KyLivlcdp5yGPBKCKvn4suAguD7heMT", options);
				return;
			}
			throw new Exception("Cannot marshal type TId");
		}

		public static readonly TIdConverter Singleton = new TIdConverter();
	}

	internal class StyleConverter : JsonConverter<Style>
	{
		public override bool CanConvert(Type t) => t == typeof(Style);

		public override Style Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
		{
			var value = reader.GetString();
			if (value == "DEFAULT")
			{
				return Style.Default;
			}
			throw new Exception("Cannot unmarshal type Style");
		}

		public override void Write(Utf8JsonWriter writer, Style value, JsonSerializerOptions options)
		{
			if (value == Style.Default)
			{
				JsonSerializer.Serialize(writer, "DEFAULT", options);
				return;
			}
			throw new Exception("Cannot marshal type Style");
		}

		public static readonly StyleConverter Singleton = new StyleConverter();
	}

	public class DateOnlyConverter : JsonConverter<DateOnly>
	{
		private readonly string serializationFormat;
		public DateOnlyConverter() : this(null) { }

		public DateOnlyConverter(string? serializationFormat)
		{
			this.serializationFormat = serializationFormat ?? "yyyy-MM-dd";
		}

		public override DateOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
		{
			var value = reader.GetString();
			return DateOnly.Parse(value!);
		}

		public override void Write(Utf8JsonWriter writer, DateOnly value, JsonSerializerOptions options)
			=> writer.WriteStringValue(value.ToString(serializationFormat));
	}

	public class TimeOnlyConverter : JsonConverter<TimeOnly>
	{
		private readonly string serializationFormat;

		public TimeOnlyConverter() : this(null) { }

		public TimeOnlyConverter(string? serializationFormat)
		{
			this.serializationFormat = serializationFormat ?? "HH:mm:ss.fff";
		}

		public override TimeOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
		{
			var value = reader.GetString();
			return TimeOnly.Parse(value!);
		}

		public override void Write(Utf8JsonWriter writer, TimeOnly value, JsonSerializerOptions options)
			=> writer.WriteStringValue(value.ToString(serializationFormat));
	}

	internal class IsoDateTimeOffsetConverter : JsonConverter<DateTimeOffset>
	{
		public override bool CanConvert(Type t) => t == typeof(DateTimeOffset);

		private const string DefaultDateTimeFormat = "yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK";

		private DateTimeStyles _dateTimeStyles = DateTimeStyles.RoundtripKind;
		private string? _dateTimeFormat;
		private CultureInfo? _culture;

		public DateTimeStyles DateTimeStyles
		{
			get => _dateTimeStyles;
			set => _dateTimeStyles = value;
		}

		public string? DateTimeFormat
		{
			get => _dateTimeFormat ?? string.Empty;
			set => _dateTimeFormat = (string.IsNullOrEmpty(value)) ? null : value;
		}

		public CultureInfo Culture
		{
			get => _culture ?? CultureInfo.CurrentCulture;
			set => _culture = value;
		}

		public override void Write(Utf8JsonWriter writer, DateTimeOffset value, JsonSerializerOptions options)
		{
			string text;


			if ((_dateTimeStyles & DateTimeStyles.AdjustToUniversal) == DateTimeStyles.AdjustToUniversal
				|| (_dateTimeStyles & DateTimeStyles.AssumeUniversal) == DateTimeStyles.AssumeUniversal)
			{
				value = value.ToUniversalTime();
			}

			text = value.ToString(_dateTimeFormat ?? DefaultDateTimeFormat, Culture);

			writer.WriteStringValue(text);
		}

		public override DateTimeOffset Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
		{
			string? dateText = reader.GetString();

			if (string.IsNullOrEmpty(dateText) == false)
			{
				if (!string.IsNullOrEmpty(_dateTimeFormat))
				{
					return DateTimeOffset.ParseExact(dateText, _dateTimeFormat, Culture, _dateTimeStyles);
				}
				else
				{
					return DateTimeOffset.Parse(dateText, Culture, _dateTimeStyles);
				}
			}
			else
			{
				return default(DateTimeOffset);
			}
		}


		public static readonly IsoDateTimeOffsetConverter Singleton = new IsoDateTimeOffsetConverter();
	}
}
#pragma warning restore CS8618
#pragma warning restore CS8601
#pragma warning restore CS8603
